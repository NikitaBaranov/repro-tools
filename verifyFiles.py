#!/usr/bin/env python

#Script to check whether the output files generated by HCP pipeline scripts are the same or not. It will check for the match between two files with respect the filename, size, content, modification time, distance etc.
#Maintainters : Big Data Lab Team, Concordia University.
#email : tristan.glatard@concordia.ca, laletscaria@yahoo.co.in

import os
import sys
import subprocess
import argparse
import hashlib
from collections import defaultdict,OrderedDict
#study_folder_details_dict_list is a list for storing ordered dictionaries containing the details regarding the files of  individual subjects.
study_folder_details_dict_list=[]
#Method list_files_and_dirs is used for listing files and directories present in the input directory.
#Input Argument : Directory Path
def list_files_and_dirs(dirPath):
        listFileAndDirs=[]
	rootDir=dirPath
        for dir_, _, files in os.walk(rootDir):
           listFileAndDirs.append(os.path.relpath(dir_, rootDir))
           for fileName in files:
              relDir=os.path.relpath(dir_, rootDir)
              relFile=os.path.join(relDir, fileName)
              listFileAndDirs.append(relFile)
	#Sort the files and subdirectories according to the modification time.
        listFileAndDirs.sort(key=lambda x: os.path.getmtime(os.path.join(rootDir,x)))
	return listFileAndDirs

#Method populate_file_dir_dict is an ordered  python dictionary to save the status details of
#each file and directory present in the listFileAndDirs list
#Input parameter : List contianing the details of the path of each file and directory.
def populate_file_dir_dict(listFileAndDirs,dirPath):
        temp_dict=OrderedDict(defaultdict(list))
        for relPath in listFileAndDirs:
	   md5_digest=generate_checksum(dirPath,relPath)
           dirDetails=os.stat(os.path.join(dirPath,relPath))
	   temp_dict.setdefault(relPath, []).append(md5_digest)
	   temp_dict.setdefault(relPath, []).append(dirDetails)
        return temp_dict

#Method populate_study_folder_dict will store the details regarding each subject folder in an ordered python dictionary. Key : Folder or file name , Value : dictionary with details of the key value
def populate_study_folder_dict(file_path):
	list_of_dictionaries_based_on_conditions=[]
	#study_folders_list : List contains path to the folders contianing the study folders based on each condition and os
	study_folders_list=read_contents_from_file(file_path)
	for folder in study_folders_list:
           temp_study_folder_dict=OrderedDict()
	   #fileNamesAndDirArray is used to store the relative path of the directories and files present in the directory given as input.
           fileNamesAndDirArray=[]
           #file_dir_dict is an ordered  python dictionary used to store the details of individual files.Key : Relative file path, Value : Status info
           file_dir_dict=OrderedDict()
	   fileNamesAndDirArray=list_files_and_dirs(folder)
	   file_dir_dict=populate_file_dir_dict(fileNamesAndDirArray,folder)
	   temp_study_folder_dict[folder]=file_dir_dict
	   list_of_dictionaries_based_on_conditions.append(temp_study_folder_dict)
	return list_of_dictionaries_based_on_conditions

#read_contents_from_file method is used to read the directory path containing the subject folders.
def read_contents_from_file(fileDir): 
# Open the file for reading.
	with open(fileDir, 'r') as infile:
	   data=infile.read()  # Read the contents of the file into memory.
	   #Return a list of the lines, breaking at line boundaries.
	   directory_list=data.splitlines()
	return directory_list

#Method generate_checksum is used for generating checksum of individual files.
def generate_checksum(rootdir, filename):
        hasher=hashlib.md5()
        if os.path.isfile(os.path.join(rootdir, filename)):
            md5_sum=file_hash(os.path.join(rootdir, filename),hasher)
	elif os.path.isdir(os.path.join(rootdir, filename)):
            md5_sum=directory_hash(hasher,os.path.join(rootdir, filename))
	return md5_sum

#Method file_hash is used for generating md5 checksum of a file Input: file name and hasher
def file_hash(fileName,hasher):
    fileContent=open(fileName)
    while True:
        readBuffer=fileContent.read(2**20)
        if len(readBuffer)==0: 
	   break
        hasher.update(readBuffer)
    fileContent.close()
    return hasher.hexdigest()

#Method directory_hash recursively traverses in case a directory is found, sorts the contents and creates checksum on the entire read content.
def directory_hash(hasher, dirPath):
    if os.path.isdir(dirPath):
        for entry in sorted(os.listdir(dirPath)):
            directory_hash(hasher, os.path.join(dirPath, entry))
    elif os.path.isfile(dirPath):
        hasher.update(file_hash(dirPath,hasher))
    else: pass
    return hasher.hexdigest()

#Method generate_common_files_list will create a list containing the common elements from the different dictionaries corresponding to the conditions in which it was created
def generate_common_files_list(study_folder_details_dict_list,fileWithDir):
	common_files_list=[]
	keys_list=read_contents_from_file(fileWithDir)
	index=0
	common_set=set([])
	for item in study_folder_details_dict_list:
              dictionary=item[keys_list[index]]
	      keys_from_each_dictionary=set(dictionary.keys())
	      if(len(common_set)):
	         keys_common=common_set & keys_from_each_dictionary
	      index+=1
	#dict(set.intersection(*(set(d.iteritems()) for d in dicts)))
	print keys_common
    	return common_files_list

def main():
        parser=argparse.ArgumentParser()
        parser.add_argument('file_in', help='Input the text file containing the path to the subject folders')
        args=parser.parse_args()
        total=len(sys.argv)
        cmdargs=str(sys.argv)
        print ("The total numbers of args passed to the script: %d " % total)
        print ("Args list: %s " % cmdargs)
        print ("Script name: %s" % str(sys.argv[0]))
        print ("First argument: %s" % str(sys.argv[1]))
        study_folder_details_dict_list=populate_study_folder_dict(sys.argv[1])
        #generate_common_files_list(study_folder_details_dict_list,sys.argv[1])
	print study_folder_details_dict_list

if __name__=='__main__':
	main()
